#!/bin/bash

# configure
# This script checks for required dependencies and generates the Makefile.

echo "Configuring pg_pandas extension..."

# Check for Python3
PYTHON=$(which python3)
if [ -z "$PYTHON" ]; then
  echo "Error: Python3 is not installed or not in PATH."
  exit 1
fi

# Check Python version
PYTHON_VERSION=$($PYTHON -c "import sys; print('.'.join(map(str, sys.version_info[:2])))")
REQUIRED_VERSION="3.7"
if python3 -c "import sys; sys.exit(0) if sys.version_info >= (3,7) else sys.exit(1)" ; then
    :
else
    echo "Error: Python 3.7 or higher is required. Detected version: $PYTHON_VERSION"
    exit 1
fi
echo "Found Python version $PYTHON_VERSION."

# Check for Pandas
if ! $PYTHON -c "import pandas" 2>/dev/null; then
  echo "Error: Pandas is not installed."
  exit 1
fi
echo "Pandas is installed."

# Check for pg_config
PG_CONFIG=$(which pg_config)
if [ -z "$PG_CONFIG" ]; then
  echo "Error: pg_config not found. Install PostgreSQL development files."
  exit 1
fi
echo "Found pg_config at $PG_CONFIG."

# Get PostgreSQL version
PG_VERSION=$($PG_CONFIG --version)
echo "PostgreSQL version: $PG_VERSION"

# Determine postgresql.conf path using environment variable or command-line argument
if [ -n "$PGCONF" ]; then
    POSTGRESQL_CONF="$PGCONF"
elif [ -n "$1" ]; then
    POSTGRESQL_CONF="$1/postgresql.conf"
else
    if [ -z "$PGDATA" ]; then
        echo "Error: PGDATA environment variable is not set and no configuration path provided."
        exit 1
    fi
    POSTGRESQL_CONF="$PGDATA/postgresql.conf"
fi

# Read pg_pandas.parallel from postgresql.conf
PG_PANDAS_PARALLEL=$(grep "^pg_pandas.parallel" "$POSTGRESQL_CONF" | awk -F '=' '{print $2}' | tr -d ' ')

if [ -z "$PG_PANDAS_PARALLEL" ]; then
    PG_PANDAS_PARALLEL=1
fi

echo "pg_pandas.parallel set to $PG_PANDAS_PARALLEL."

# Generate Makefile
echo "Generating Makefile..."
cat <<EOF > Makefile
# Makefile for pg_pandas extension

EXTENSION = pg_pandas
MODULES = pg_pandas pg_pandas_worker
DATA = pg_pandas--1.0.sql
PG_CONFIG = $PG_CONFIG
PGXS := \$(shell \$(PG_CONFIG) --pgxs)
include \$(PGXS)

# Link against Python library using python3-config
PYTHON_CONFIG ?= python3-config
PYTHON_INCLUDE = \$(shell \$(PYTHON_CONFIG) --includes)
PYTHON_LIBS = \$(shell \$(PYTHON_CONFIG) --ldflags)

CFLAGS += \$(PYTHON_INCLUDE)
LDFLAGS += \$(PYTHON_LIBS)

# Define parallel workers
CPPFLAGS += -DPG_PANDAS_PARALLEL=$PG_PANDAS_PARALLEL
EOF

echo "Makefile generated successfully."

# Test Pandas installation
echo "Testing Pandas installation..."
TEST_SCRIPT=$(mktemp)
cat <<EOF > $TEST_SCRIPT
import pandas as pd
print("Pandas test passed. Version:", pd.__version__)
EOF

$PYTHON $TEST_SCRIPT || { echo "Error: Pandas test failed."; rm $TEST_SCRIPT; exit 1; }
rm $TEST_SCRIPT

echo "Configuration completed successfully."